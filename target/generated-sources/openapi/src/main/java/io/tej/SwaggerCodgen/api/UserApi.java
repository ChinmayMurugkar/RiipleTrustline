/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.tej.SwaggerCodgen.api;

import io.tej.SwaggerCodgen.model.GetBalanceResponse;
import io.tej.SwaggerCodgen.model.ReceivingUnitsRequest;
import io.tej.SwaggerCodgen.model.ReceivingUnitsResponse;
import io.tej.SwaggerCodgen.model.SendUnitRequest;
import io.tej.SwaggerCodgen.model.SendUnitResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-13T01:22:13.369819-07:00[America/Los_Angeles]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user/getBalance : Get users balance
     *
     * @param userName  (required)
     * @return successful operation (status code 200)
     *         or User not found (status code 404)
     *         or Internal server error while getting users (status code 500)
     */
    @ApiOperation(value = "Get users balance", nickname = "getBalance", notes = "", response = GetBalanceResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetBalanceResponse.class),
        @ApiResponse(code = 404, message = "User not found"),
        @ApiResponse(code = 500, message = "Internal server error while getting users") })
    @RequestMapping(value = "/user/getBalance",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GetBalanceResponse> _getBalance(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userName", required = true) String userName) {
        return getBalance(userName);
    }

    // Override this method
    default  ResponseEntity<GetBalanceResponse> getBalance(String userName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : \"-10.45\", \"userName\" : \"John\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/receivingUnits : Send units to the user
     *
     * @param receivingUnitsRequest User sending units to other user (required)
     * @return User Added (status code 200)
     *         or User not added (status code 404)
     *         or User registeration failed (status code 500)
     */
    @ApiOperation(value = "Send units to the user", nickname = "receivingUnits", notes = "", response = ReceivingUnitsResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User Added", response = ReceivingUnitsResponse.class),
        @ApiResponse(code = 404, message = "User not added"),
        @ApiResponse(code = 500, message = "User registeration failed") })
    @RequestMapping(value = "/user/receivingUnits",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ReceivingUnitsResponse> _receivingUnits(@ApiParam(value = "User sending units to other user" ,required=true )  @Valid @RequestBody ReceivingUnitsRequest receivingUnitsRequest) {
        return receivingUnits(receivingUnitsRequest);
    }

    // Override this method
    default  ResponseEntity<ReceivingUnitsResponse> receivingUnits(ReceivingUnitsRequest receivingUnitsRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitsReceived\" : \"10.45\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user/sendUnits : Send units to the user
     *
     * @param sendUnitRequest User sending units to other user (required)
     * @return User Added (status code 200)
     *         or User not added (status code 404)
     *         or User registeration failed (status code 500)
     */
    @ApiOperation(value = "Send units to the user", nickname = "sendUnits", notes = "", response = SendUnitResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User Added", response = SendUnitResponse.class),
        @ApiResponse(code = 404, message = "User not added"),
        @ApiResponse(code = 500, message = "User registeration failed") })
    @RequestMapping(value = "/user/sendUnits",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<SendUnitResponse> _sendUnits(@ApiParam(value = "User sending units to other user" ,required=true )  @Valid @RequestBody SendUnitRequest sendUnitRequest) {
        return sendUnits(sendUnitRequest);
    }

    // Override this method
    default  ResponseEntity<SendUnitResponse> sendUnits(SendUnitRequest sendUnitRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitsSent\" : \"10.45\", \"userName\" : \"John\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
